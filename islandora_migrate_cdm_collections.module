<?php

/**
 * @file
 * The main Islandora CONTENTdm Collection Migrator file.
 */

/**
 * Ingest an Islandora collection object.
 *
 * @param string $namespace
 *   The Fedora namespace to use for this object.
 * @param string $parent
 *   The PID of the parent collection the newly created collection.
 * @param string $input_path
 *   The absolute filesystem path to the tab-separated-value file generated by
 *   the get_collection_data.php command-line script.
 * @param array $collection_data
 *   The configuration data for one CONTENTdm collection.
 */
function islandora_migrate_cdm_collections_ingest_collection($namespace = 'islandora', $parent = 'islandora:root',
  $input_path = '/tmp/collections/collection_data.tsv', $collection_data = array()) {
  if ($namespace == 'use_alias') {
    $namespace = strtolower($collection_data[0]);
    // The only non-alphanumeric character that Fedora namespaces
    // can contain is "-".
    $namespace = preg_replace("/[^\da-z]/m", "-", $namespace);
    // Here we create a PID according the pattern 'alias:collection' (i.e., the
    // CONTENTdm alias plus the string 'collection').
    $namespace = $namespace . ':collection';
  }
  try {
    $tuque = new IslandoraTuque();
    $repository = $tuque->repository;
    $collection_object = $repository->constructObject($namespace);
    $collection_object->label = $collection_data[1];

    $collection_policy_xml = <<<EOCP
<collection_policy xmlns="http://www.islandora.ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="$collection_data[1]" xsi:schemaLocation="http://www.islandora.ca http://syn.lib.umanitoba.ca/collection_policy.xsd">
<content_models/>
<search_terms/>
<staging_area/>
<relationship>isMemberOfCollection</relationship>
</collection_policy>
EOCP;

    // Add the COLLECTION_POLICY ds.
    $coll_policy_datastream = $collection_object->constructDatastream('COLLECTION_POLICY', 'M');
    $coll_policy_datastream->label = 'Collection policy';
    $coll_policy_datastream->mimetype = 'text/xml';
    $coll_policy_datastream->setContentFromString($collection_policy_xml);
    $collection_object->ingestDatastream($coll_policy_datastream);

    // Add the MODS ds.
    if (count($collection_data) > 2 && strlen($collection_data[2])) {
      $collection_description = strip_tags($collection_data[2]);
    }
    else {
      $collection_description = '';
    }
    $mods_xml = <<<EODC
<?xml version="1.0"?>
<mods xmlns="http://www.loc.gov/mods/v3" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink">
  <titleInfo>
    <title>$collection_data[1]</title>
  </titleInfo>
  <name type="personal">
    <namePart/>
    <role>
      <roleTerm authority="marcrelator" type="text"/>
    </role>
  </name>
  <typeOfResource collection="yes"/>
  <genre authority="lctgm"/>
  <originInfo>
    <dateCreated/>
  </originInfo>
  <language>
    <languageTerm authority="iso639-2b" type="code">eng</languageTerm>
  </language>
  <abstract>$collection_description</abstract>
  <identifier type="local"/>
  <physicalDescription>
    <form authority="marcform"/>
    <extent/>
  </physicalDescription>
  <note/>
  <accessCondition/>
  <subject>
    <topic/>
    <geographic/>
    <temporal/>
    <hierarchicalGeographic>
      <continent/>
      <country/>
      <province/>
      <region/>
      <county/>
      <city/>
      <citySection/>
    </hierarchicalGeographic>
    <cartographics>
      <coordinates/>
    </cartographics>
  </subject>
</mods>
EODC;

    $mods_datastream = $collection_object->constructDatastream('MODS', 'M');
    $mods_datastream->label = 'MODS Record';
    $mods_datastream->mimetype = 'application/xml';
    $mods_datastream->setContentFromString($mods_xml);
    $collection_object->ingestDatastream($mods_datastream);

    // Add thumbnail ds. If we don't have thumbnails in the input data,
    // use the image provided by the collection solution pack.
    $tn_datastream = $collection_object->constructDatastream('TN', 'M');
    if (count($collection_data) > 2 && strlen($collection_data[3])) {
      $input_path_dirname = dirname($input_path);
      $path_to_thumbnail = $input_path_dirname . DIRECTORY_SEPARATOR .
        $collection_data[0] . DIRECTORY_SEPARATOR . trim($collection_data[3]);
      if (!file_exists($path_to_thumbnail) || !is_file($path_to_thumbnail)) {
        $path_to_thumbnail = drupal_get_path('module', 'islandora_basic_collection') .
          '/images/folder.png';
      }
    }
    else {
      $path_to_thumbnail = drupal_get_path('module', 'islandora_basic_collection') .
        '/images/folder.png';
    }
    $tn_mime_detector = new MimeDetect();
    $tn_datastream->mimetype = $tn_mime_detector->getMimetype($path_to_thumbnail);
    $tn_datastream->label = 'Thumbnail';
    $tn_datastream->setContentFromFile($path_to_thumbnail);
    $collection_object->ingestDatastream($tn_datastream);

    // Add the CDMFIELDINFO datastream, if CDMFIELDINFO.json is present.
    $path_to_cdmfieldinfo = $input_path_dirname . DIRECTORY_SEPARATOR .
      $collection_data[0] . DIRECTORY_SEPARATOR . 'CDMFIELDINFO.json';
    if (file_exists($path_to_cdmfieldinfo)) {
      $cdmfieldinfo_datastream = $collection_object->constructDatastream('CDMFIELDINFO', 'M');
      $cdmfieldinfo_mime_detector = new MimeDetect();
      $cdmfieldinfo_datastream->mimetype = $cdmfieldinfo_mime_detector->getMimetype($path_to_cdmfieldinfo);
      $cdmfieldinfo_datastream->label = 'CONTENTdm dmGetCollectionFieldInfo output for this object';
      $cdmfieldinfo_datastream->setContentFromFile($path_to_cdmfieldinfo);
      $collection_object->ingestDatastream($cdmfieldinfo_datastream);
    }

    // Add relationships.
    $rels = $collection_object->relationships;
    $rels->add('info:fedora/fedora-system:def/relations-external#', 'isMemberOfCollection', $parent, FALSE);
    $rels->add('info:fedora/fedora-system:def/model#', 'hasModel', 'islandora:collectionCModel', FALSE);

    $repository->ingestObject($collection_object);
    drupal_set_message(t('Ingested Islandora collection object %t (PID %p).',
      array('%t' => $collection_object->label, '%p' => $collection_object->id)));
    watchdog('islandora_migrate_cdm_collections', 'Ingested Islandora collection object %t (PID %p).',
      array('%t' => $collection_object->label, '%p' => $collection_object->id), WATCHDOG_INFO);
  }
  catch (Exception $e) {
    drupal_set_message(t('Error ingesting Islandora collection object %t (PID %p).',
      array('%t' => $collection_object->title, '%p' => $collection_object->id), 'error'));
    watchdog('islandora_migrate_cdm_collections', 'Error ingesting Islandora collection object %t (PID %p).',
      array('%t' => $collection_data[1], '%p' => $collection_object->id), WATCHDOG_ERROR);
  }
}

/**
 * Ingest a Drupal node to correspond to an Islandora collection object.
 *
 * All content types must have the following fields:
 *   -title
 *   -cdm_alias (Text/Text field)
 *   -description (Long text/Textarea (multiple rows))
 *   -thumbnail (Image/Image)
 *   -pid (Text/Text field)
 *
 * @param string $input_path
 *   The absolute filesystem path to the tab-separated-value file generated by
 *   get_collection_data.php.
 * @param array $collection_data
 *   The configuration data for one CONTENTdm collection.
 * @param string $content_type
 *   The Drupal content type to use for the node.
 * @param string $namespace
 *   The value of the --namespace Drush option.
 */
function islandora_migrate_cdm_collections_ingest_node($input_path, array $collection_data, $content_type, $namespace = NULL) {
  // Create the file object so we can add it to the node.
  if (array_key_exists(3, $collection_data)) {
    $input_path_dirname = dirname($input_path);
    $path_to_thumbnail = $input_path_dirname . DIRECTORY_SEPARATOR .
      $collection_data[0] . DIRECTORY_SEPARATOR . trim($collection_data[3]);
    if (!file_exists($path_to_thumbnail)) {
      $path_to_thumbnail = drupal_get_path('module', 'islandora_basic_collection') .
        '/images/folder.png';
    }
  }
  else {
    $path_to_thumbnail = drupal_get_path('module', 'islandora_basic_collection') .
      '/images/folder.png';
  }

  if (file_exists($path_to_thumbnail)) {
    unset($file);
    $file = file_save_data(file_get_contents($path_to_thumbnail),
      file_default_scheme() . '://' . basename($path_to_thumbnail));
    if ($file) {
      $file->status = FILE_STATUS_PERMANENT;
      $file->display = 1;
      $file->description = basename($path_to_thumbnail);
      $file->uid = 1;
    }
  }

  // Create the node object.
  $node = new stdClass();
  $node->title = trim($collection_data[1]);
  $node->type = $content_type;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  if (array_key_exists(3, $collection_data)) {
    $node->field_thumbnail[LANGUAGE_NONE][0] = (array) $file;
  }

  if ($namespace == 'use_alias') {
    $node->field_pid[LANGUAGE_NONE][0]['value'] = $collection_data[0] . ':collection';
  }
  else {
    $node->field_pid[LANGUAGE_NONE][0]['value'] = '';
  }
  $node->field_cdm_alias[LANGUAGE_NONE][0]['value'] = $collection_data[0];
  if (array_key_exists(2, $collection_data)) {
    $node->field_description[LANGUAGE_NONE][0]['value'] = $collection_data[2];
    $node->field_description[LANGUAGE_NONE][0]['format'] = 'full_html';
  }

  // Save the node.
  if ($node->title) {
    $node = node_submit($node);
    if ($node->validated) {
      node_save($node);
    }
  }

  print "Collection node with title $node->title created\n";
}
